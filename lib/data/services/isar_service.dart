import 'package:isar_community/isar.dart';
import 'package:path_provider/path_provider.dart';
import '../models/local/competition_local.dart';
import '../models/local/team_local.dart';
import '../models/local/weighing_local.dart';
import '../models/local/weighing_result_local.dart';
import '../models/local/operation_queue.dart';
import '../models/local/protocol_local.dart';
import '../models/local/casting_session_local.dart';
import '../models/local/casting_result_local.dart';

class IsarService {
  static Isar? _isar;

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç–∞–Ω—Å Isar (singleton)
  static Future<Isar> getInstance() async {
    if (_isar != null && _isar!.isOpen) {
      return _isar!;
    }

    final dir = await getApplicationDocumentsDirectory();

    _isar = await Isar.open(
      [
        CompetitionLocalSchema,
        TeamLocalSchema,
        WeighingLocalSchema,
        WeighingResultLocalSchema,
        OperationQueueSchema,
        ProtocolLocalSchema,
        CastingSessionLocalSchema,
        CastingResultLocalSchema,
      ],
      directory: dir.path,
      name: 'drift_score',
    );

    return _isar!;
  }

  /// –ó–∞–∫—Ä—ã—Ç—å Isar (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
  static Future<void> close() async {
    if (_isar != null && _isar!.isOpen) {
      await _isar!.close();
      _isar = null;
    }
  }

  // ========== CompetitionLocal ==========

  Future<int> saveCompetition(CompetitionLocal competition) async {
    final isar = await getInstance();
    return await isar.writeTxn(() async {
      return await isar.competitionLocals.put(competition);
    });
  }

  Future<CompetitionLocal?> getCompetition(int id) async {
    final isar = await getInstance();
    return await isar.competitionLocals.get(id);
  }

  Future<List<CompetitionLocal>> getAllCompetitions() async {
    final isar = await getInstance();
    return await isar.competitionLocals.where().findAll();
  }

  Future<void> updateCompetition(CompetitionLocal competition) async {
    final isar = await getInstance();
    await isar.writeTxn(() async {
      await isar.competitionLocals.put(competition);
    });
  }

  Future<void> deleteCompetition(int id) async {
    final isar = await getInstance();

    await isar.writeTxn(() async {
      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
      final weighings = await isar.weighingLocals
          .filter()
          .competitionLocalIdEqualTo(id)
          .findAll();

      int deletedWeighingResults = 0;

      // 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —É–¥–∞–ª—è–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (var weighing in weighings) {
        final results = await isar.weighingResultLocals
            .filter()
            .weighingLocalIdEqualTo(weighing.id!)
            .findAll();

        for (var result in results) {
          await isar.weighingResultLocals.delete(result.id!);
          deletedWeighingResults++;
        }

        // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ
        await isar.weighingLocals.delete(weighing.id!);
      }

      // 3. –£–¥–∞–ª—è–µ–º –∫–∞—Å—Ç–∏–Ω–≥-—Å–µ—Å—Å–∏–∏ –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ù–û–í–û–ï)
      final castingSessions = await isar.castingSessionLocals
          .filter()
          .competitionIdEqualTo(id)
          .findAll();

      int deletedCastingResults = 0;
      for (var session in castingSessions) {
        final results = await isar.castingResultLocals
            .filter()
            .castingSessionIdEqualTo(session.id)
            .findAll();
        for (var result in results) {
          await isar.castingResultLocals.delete(result.id);
          deletedCastingResults++;
        }
        await isar.castingSessionLocals.delete(session.id);
      }

      // 4. –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
      final teams = await isar.teamLocals
          .filter()
          .competitionLocalIdEqualTo(id)
          .findAll();

      for (var team in teams) {
        await isar.teamLocals.delete(team.id!);
      }

      // 5. –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
      final protocols = await isar.protocolLocals
          .filter()
          .competitionIdEqualTo(id.toString())
          .findAll();

      for (var protocol in protocols) {
        await isar.protocolLocals.delete(protocol.id);
      }

      // 6. –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ
      await isar.competitionLocals.delete(id);

      print('‚úÖ Deleted competition $id with all related data:');
      print('   - Weighings: ${weighings.length}');
      print('   - Weighing Results: $deletedWeighingResults');
      print('   - Casting Sessions: ${castingSessions.length}');
      print('   - Casting Results: $deletedCastingResults');
      print('   - Teams: ${teams.length}');
      print('   - Protocols: ${protocols.length}');
    });
  }

  // ========== TeamLocal ==========

  Future<int> saveTeam(TeamLocal team) async {
    final isar = await getInstance();
    return await isar.writeTxn(() async {
      return await isar.teamLocals.put(team);
    });
  }

  Future<TeamLocal?> getTeam(int id) async {
    final isar = await getInstance();
    return await isar.teamLocals.get(id);
  }

  Future<List<TeamLocal>> getTeamsByCompetition(int competitionId) async {
    final isar = await getInstance();
    return await isar.teamLocals
        .filter()
        .competitionLocalIdEqualTo(competitionId)
        .findAll();
  }

  Future<void> updateTeam(TeamLocal team) async {
    final isar = await getInstance();
    await isar.writeTxn(() async {
      await isar.teamLocals.put(team);
    });
  }

  Future<void> deleteTeam(int id) async {
    final isar = await getInstance();
    await isar.writeTxn(() async {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
      final results = await isar.weighingResultLocals
          .filter()
          .teamLocalIdEqualTo(id)
          .findAll();

      for (var result in results) {
        await isar.weighingResultLocals.delete(result.id!);
      }

      // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
      await isar.teamLocals.delete(id);

      print('‚úÖ Deleted team $id with ${results.length} results');
    });
  }

  // ========== WeighingLocal ==========

  Future<int> saveWeighing(WeighingLocal weighing) async {
    final isar = await getInstance();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    final existing = await isar.weighingLocals
        .filter()
        .competitionLocalIdEqualTo(weighing.competitionLocalId)
        .dayNumberEqualTo(weighing.dayNumber)
        .weighingNumberEqualTo(weighing.weighingNumber)
        .findFirst();

    if (existing != null && weighing.id == null) {
      print('‚ö†Ô∏è Weighing already exists: Day ${weighing.dayNumber}, #${weighing.weighingNumber}, id=${existing.id}');
      return existing.id!;
    }

    return await isar.writeTxn(() async {
      final id = await isar.weighingLocals.put(weighing);
      print('‚úÖ Saved weighing: Day ${weighing.dayNumber}, #${weighing.weighingNumber}, id=$id');
      return id;
    });
  }

  Future<WeighingLocal?> getWeighing(int id) async {
    final isar = await getInstance();
    return await isar.weighingLocals.get(id);
  }

  Future<List<WeighingLocal>> getWeighingsByCompetition(int competitionId) async {
    final isar = await getInstance();
    return await isar.weighingLocals
        .filter()
        .competitionLocalIdEqualTo(competitionId)
        .sortByWeighingTimeDesc()
        .findAll();
  }

  Future<void> updateWeighing(WeighingLocal weighing) async {
    final isar = await getInstance();
    await isar.writeTxn(() async {
      await isar.weighingLocals.put(weighing);
    });
  }

  Future<void> deleteWeighing(int id) async {
    final isar = await getInstance();
    await isar.writeTxn(() async {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–æ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
      final results = await isar.weighingResultLocals
          .filter()
          .weighingLocalIdEqualTo(id)
          .findAll();

      for (var result in results) {
        await isar.weighingResultLocals.delete(result.id!);
      }

      // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ
      await isar.weighingLocals.delete(id);

      print('‚úÖ Deleted weighing $id with ${results.length} results');
    });
  }

  /// –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ)
  Future<int> removeDuplicateWeighings(int competitionId) async {
    final isar = await getInstance();

    final allWeighings = await isar.weighingLocals
        .filter()
        .competitionLocalIdEqualTo(competitionId)
        .findAll();

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á—É: day_number + weighing_number
    final Map<String, List<WeighingLocal>> groups = {};

    for (var w in allWeighings) {
      final key = '${w.dayNumber}_${w.weighingNumber}';
      groups.putIfAbsent(key, () => []).add(w);
    }

    int deletedCount = 0;

    await isar.writeTxn(() async {
      for (var group in groups.values) {
        if (group.length > 1) {
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ
          group.sort((a, b) => a.id!.compareTo(b.id!));

          // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
          for (int i = 1; i < group.length; i++) {
            // –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—É–±–ª–∏–∫–∞—Ç–∞
            final results = await isar.weighingResultLocals
                .filter()
                .weighingLocalIdEqualTo(group[i].id!)
                .findAll();

            for (var result in results) {
              await isar.weighingResultLocals.delete(result.id!);
            }

            await isar.weighingLocals.delete(group[i].id!);
            deletedCount++;
            print('üóëÔ∏è Deleted duplicate weighing id=${group[i].id}');
          }
        }
      }
    });

    print('‚úÖ Removed $deletedCount duplicate weighings');
    return deletedCount;
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –º—É—Å–æ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (orphaned records)
  Future<Map<String, int>> cleanOrphanedRecords() async {
    final isar = await getInstance();

    int orphanedTeams = 0;
    int orphanedWeighings = 0;
    int orphanedResults = 0;

    await isar.writeTxn(() async {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
      final competitionIds = (await isar.competitionLocals.where().findAll())
          .map((c) => c.id!)
          .toSet();

      // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
      final allTeams = await isar.teamLocals.where().findAll();
      for (var team in allTeams) {
        if (!competitionIds.contains(team.competitionLocalId)) {
          await isar.teamLocals.delete(team.id!);
          orphanedTeams++;
        }
      }

      // –£–¥–∞–ª—è–µ–º –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –±–µ–∑ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
      final allWeighings = await isar.weighingLocals.where().findAll();
      final validWeighingIds = <int>{};

      for (var weighing in allWeighings) {
        if (!competitionIds.contains(weighing.competitionLocalId)) {
          await isar.weighingLocals.delete(weighing.id!);
          orphanedWeighings++;
        } else {
          validWeighingIds.add(weighing.id!);
        }
      }

      // –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π
      final allResults = await isar.weighingResultLocals.where().findAll();
      for (var result in allResults) {
        if (!validWeighingIds.contains(result.weighingLocalId)) {
          await isar.weighingResultLocals.delete(result.id!);
          orphanedResults++;
        }
      }
    });

    print('üßπ Database cleanup completed:');
    print('   - Orphaned teams: $orphanedTeams');
    print('   - Orphaned weighings: $orphanedWeighings');
    print('   - Orphaned results: $orphanedResults');

    return {
      'teams': orphanedTeams,
      'weighings': orphanedWeighings,
      'results': orphanedResults,
    };
  }

  // ========== WeighingResultLocal ==========

  Future<int> saveWeighingResult(WeighingResultLocal result) async {
    final isar = await getInstance();
    return await isar.writeTxn(() async {
      return await isar.weighingResultLocals.put(result);
    });
  }

  Future<WeighingResultLocal?> getWeighingResult(int id) async {
    final isar = await getInstance();
    return await isar.weighingResultLocals.get(id);
  }

  Future<List<WeighingResultLocal>> getResultsByWeighing(int weighingId) async {
    final isar = await getInstance();
    return await isar.weighingResultLocals
        .filter()
        .weighingLocalIdEqualTo(weighingId)
        .findAll();
  }

  Future<WeighingResultLocal?> getResultByTeamAndWeighing(int teamId, int weighingId) async {
    final isar = await getInstance();
    return await isar.weighingResultLocals
        .filter()
        .teamLocalIdEqualTo(teamId)
        .and()
        .weighingLocalIdEqualTo(weighingId)
        .findFirst();
  }

  Future<void> updateWeighingResult(WeighingResultLocal result) async {
    final isar = await getInstance();
    await isar.writeTxn(() async {
      await isar.weighingResultLocals.put(result);
    });
  }

  Future<void> deleteWeighingResult(int id) async {
    final isar = await getInstance();
    await isar.writeTxn(() async {
      await isar.weighingResultLocals.delete(id);
    });
  }

  // ========== CastingSessionLocal ==========

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –∫–∞—Å—Ç–∏–Ω–≥–∞
  Future<int> saveCastingSession(CastingSessionLocal session) async {
    final isar = await getInstance();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ—Å—Å–∏—è —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    final existing = await isar.castingSessionLocals
        .filter()
        .competitionIdEqualTo(session.competitionId)
        .dayNumberEqualTo(session.dayNumber)
        .sessionNumberEqualTo(session.sessionNumber)
        .findFirst();

    if (existing != null && session.id == Isar.autoIncrement) {
      print('‚ö†Ô∏è Casting session already exists: Day ${session.dayNumber}, #${session.sessionNumber}, id=${existing.id}');
      return existing.id;
    }

    return await isar.writeTxn(() async {
      final id = await isar.castingSessionLocals.put(session);
      print('‚úÖ Saved casting session: Day ${session.dayNumber}, #${session.sessionNumber}, id=$id');
      return id;
    });
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –∫–∞—Å—Ç–∏–Ω–≥–∞ –ø–æ ID
  Future<CastingSessionLocal?> getCastingSession(int id) async {
    final isar = await getInstance();
    return await isar.castingSessionLocals.get(id);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
  Future<List<CastingSessionLocal>> getCastingSessionsByCompetition(int competitionId) async {
    final isar = await getInstance();
    return await isar.castingSessionLocals
        .filter()
        .competitionIdEqualTo(competitionId)
        .sortBySessionTimeDesc()
        .findAll();
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∫–∞—Å—Ç–∏–Ω–≥–∞
  Future<void> updateCastingSession(CastingSessionLocal session) async {
    final isar = await getInstance();
    await isar.writeTxn(() async {
      await isar.castingSessionLocals.put(session);
    });
  }

  /// –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é –∫–∞—Å—Ç–∏–Ω–≥–∞
  Future<void> deleteCastingSession(int id) async {
    final isar = await getInstance();
    await isar.writeTxn(() async {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
      final results = await isar.castingResultLocals
          .filter()
          .castingSessionIdEqualTo(id)
          .findAll();

      for (var result in results) {
        await isar.castingResultLocals.delete(result.id);
      }

      // –£–¥–∞–ª—è–µ–º —Å–∞–º—É —Å–µ—Å—Å–∏—é
      await isar.castingSessionLocals.delete(id);

      print('‚úÖ Deleted casting session $id with ${results.length} results');
    });
  }

  // ========== CastingResultLocal ==========

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞
  Future<int> saveCastingResult(CastingResultLocal result) async {
    final isar = await getInstance();
    return await isar.writeTxn(() async {
      return await isar.castingResultLocals.put(result);
    });
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ ID
  Future<CastingResultLocal?> getCastingResult(int id) async {
    final isar = await getInstance();
    return await isar.castingResultLocals.get(id);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏
  Future<List<CastingResultLocal>> getResultsByCastingSession(int sessionId) async {
    final isar = await getInstance();
    return await isar.castingResultLocals
        .filter()
        .castingSessionIdEqualTo(sessionId)
        .sortByBestDistanceDesc()
        .findAll();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
  Future<CastingResultLocal?> getResultByParticipantAndSession(
      int participantId,
      int sessionId,
      ) async {
    final isar = await getInstance();
    return await isar.castingResultLocals
        .filter()
        .participantIdEqualTo(participantId)
        .and()
        .castingSessionIdEqualTo(sessionId)
        .findFirst();
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞
  Future<void> updateCastingResult(CastingResultLocal result) async {
    final isar = await getInstance();
    await isar.writeTxn(() async {
      await isar.castingResultLocals.put(result);
    });
  }

  /// –£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞
  Future<void> deleteCastingResult(int id) async {
    final isar = await getInstance();
    await isar.writeTxn(() async {
      await isar.castingResultLocals.delete(id);
    });
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏
  Future<List<CastingResultLocal>> getResultsByParticipant(int participantId) async {
    final isar = await getInstance();
    return await isar.castingResultLocals
        .filter()
        .participantIdEqualTo(participantId)
        .sortByCreatedAtDesc()
        .findAll();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø–æ –ª—É—á—à–µ–π –¥–∞–ª—å–Ω–æ—Å—Ç–∏
  Future<List<CastingResultLocal>> getTopParticipantsByDistance(
      int competitionId,
      {int limit = 10}
      ) async {
    final isar = await getInstance();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
    final sessions = await getCastingSessionsByCompetition(competitionId);
    final sessionIds = sessions.map((s) => s.id).toList();

    if (sessionIds.isEmpty) return [];

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–∏—Ö —Å–µ—Å—Å–∏–π
    final allResults = <CastingResultLocal>[];
    for (var sessionId in sessionIds) {
      final results = await getResultsByCastingSession(sessionId);
      allResults.addAll(results);
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ participantId –∏ –±–µ—Ä—ë–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    final Map<int, CastingResultLocal> bestResults = {};
    for (var result in allResults) {
      if (!bestResults.containsKey(result.participantId) ||
          result.bestDistance > bestResults[result.participantId]!.bestDistance) {
        bestResults[result.participantId] = result;
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø
    final sorted = bestResults.values.toList()
      ..sort((a, b) => b.bestDistance.compareTo(a.bestDistance));

    return sorted.take(limit).toList();
  }

  // ============================================================
  // PROTOCOL METHODS
  // ============================================================

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª
  Future<int> saveProtocol(ProtocolLocal protocol) async {
    final isar = await getInstance();
    return await isar.writeTxn(() async {
      return await isar.protocolLocals.put(protocol);
    });
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
  Future<List<ProtocolLocal>> getProtocolsByCompetition(int competitionId) async {
    final isar = await getInstance();
    return await isar.protocolLocals
        .filter()
        .competitionIdEqualTo(competitionId.toString())
        .sortByCreatedAtDesc()
        .findAll();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ø–æ —Ç–∏–ø—É
  Future<List<ProtocolLocal>> getProtocolsByType(
      int competitionId,
      String type,
      ) async {
    final isar = await getInstance();
    return await isar.protocolLocals
        .filter()
        .competitionIdEqualTo(competitionId.toString())
        .typeEqualTo(type)
        .sortByCreatedAtDesc()
        .findAll();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
  Future<ProtocolLocal?> getWeighingProtocol(
      int competitionId,
      String weighingId,
      ) async {
    final isar = await getInstance();
    return await isar.protocolLocals
        .filter()
        .competitionIdEqualTo(competitionId.toString())
        .typeEqualTo('weighing')
        .weighingIdEqualTo(weighingId)
        .findFirst();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ –Ω–æ–º–µ—Ä—É –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
  Future<ProtocolLocal?> getIntermediateProtocol(
      int competitionId,
      int weighingNumber,
      ) async {
    final isar = await getInstance();
    return await isar.protocolLocals
        .filter()
        .competitionIdEqualTo(competitionId.toString())
        .typeEqualTo('intermediate')
        .weighingNumberEqualTo(weighingNumber)
        .findFirst();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª Big Fish –ø–æ –¥–Ω—é
  Future<ProtocolLocal?> getBigFishProtocol(
      int competitionId,
      int bigFishDay,
      ) async {
    final isar = await getInstance();
    return await isar.protocolLocals
        .filter()
        .competitionIdEqualTo(competitionId.toString())
        .typeEqualTo('big_fish')
        .bigFishDayEqualTo(bigFishDay)
        .findFirst();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
  Future<ProtocolLocal?> getSummaryProtocol(int competitionId) async {
    final isar = await getInstance();
    return await isar.protocolLocals
        .filter()
        .competitionIdEqualTo(competitionId.toString())
        .typeEqualTo('summary')
        .sortByCreatedAtDesc()
        .findFirst();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
  Future<ProtocolLocal?> getFinalProtocol(int competitionId) async {
    final isar = await getInstance();
    return await isar.protocolLocals
        .filter()
        .competitionIdEqualTo(competitionId.toString())
        .typeEqualTo('final')
        .findFirst();
  }

  /// –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª
  Future<bool> deleteProtocol(int id) async {
    final isar = await getInstance();
    return await isar.writeTxn(() async {
      return await isar.protocolLocals.delete(id);
    });
  }

  /// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
  Future<int> deleteProtocolsByCompetition(int competitionId) async {
    final isar = await getInstance();
    return await isar.writeTxn(() async {
      final protocols = await isar.protocolLocals
          .filter()
          .competitionIdEqualTo(competitionId.toString())
          .findAll();
      final ids = protocols.map((p) => p.id).toList();
      return await isar.protocolLocals.deleteAll(ids);
    });
  }
}