import 'dart:async';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:flutter/foundation.dart';

class PurchaseService {
  final InAppPurchase _iap = InAppPurchase.instance;

  // ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å ID –≤ Google Play / App Store)
  static const String singleCodeProductId = 'drift_score_single_code';
  static const String multiCodeProductId = 'drift_score_multi_code';

  // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  List<ProductDetails> _products = [];
  List<ProductDetails> get products => _products;

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫–∏
  StreamSubscription<List<PurchaseDetails>>? _subscription;

  // Callback –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
  Function(String productId)? onPurchaseSuccess;
  Function(String error)? onPurchaseError;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∫—É–ø–æ–∫
  Future<bool> initialize() async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å In-App Purchase
      final available = await _iap.isAvailable();
      if (!available) {
        print('‚ùå In-App Purchase not available');
        return false;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
      await loadProducts();

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
      _subscription = _iap.purchaseStream.listen(
        _onPurchaseUpdate,
        onError: (error) {
          print('‚ùå Purchase stream error: $error');
          onPurchaseError?.call(error.toString());
        },
      );

      print('‚úÖ Purchase service initialized');
      return true;
    } catch (e) {
      print('‚ùå Error initializing purchase service: $e');
      return false;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
  Future<void> loadProducts() async {
    try {
      final Set<String> productIds = {
        singleCodeProductId,
        multiCodeProductId,
      };

      final ProductDetailsResponse response = await _iap.queryProductDetails(productIds);

      if (response.notFoundIDs.isNotEmpty) {
        print('‚ö†Ô∏è Products not found: ${response.notFoundIDs}');
      }

      _products = response.productDetails;
      print('‚úÖ Loaded ${_products.length} products:');
      for (var product in _products) {
        print('   - ${product.id}: ${product.price} (${product.title})');
      }
    } catch (e) {
      print('‚ùå Error loading products: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞
  String? getProductPrice(String productId) {
    try {
      final product = _products.firstWhere((p) => p.id == productId);
      return product.price;
    } catch (e) {
      return null;
    }
  }

  /// –ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
  Future<void> buyProduct(String productId) async {
    try {
      final product = _products.firstWhere((p) => p.id == productId);

      final PurchaseParam purchaseParam = PurchaseParam(
        productDetails: product,
      );

      await _iap.buyConsumable(
        purchaseParam: purchaseParam,
        autoConsume: true,
      );

      print('üõí Purchase initiated: $productId');
    } catch (e) {
      print('‚ùå Error buying product: $e');
      onPurchaseError?.call(e.toString());
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∫—É–ø–æ–∫
  void _onPurchaseUpdate(List<PurchaseDetails> purchases) {
    for (var purchase in purchases) {
      print('üì¶ Purchase update: ${purchase.productID} - ${purchase.status}');

      if (purchase.status == PurchaseStatus.purchased) {
        // ‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!
        _handleSuccessfulPurchase(purchase);
      } else if (purchase.status == PurchaseStatus.error) {
        // ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏
        print('‚ùå Purchase error: ${purchase.error}');
        onPurchaseError?.call(purchase.error?.message ?? 'Unknown error');
      } else if (purchase.status == PurchaseStatus.canceled) {
        // üö´ –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
        print('üö´ Purchase canceled');
        onPurchaseError?.call('Purchase canceled');
      }

      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      if (purchase.pendingCompletePurchase) {
        _iap.completePurchase(purchase);
      }
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
  Future<void> _handleSuccessfulPurchase(PurchaseDetails purchase) async {
    print('‚úÖ Purchase successful: ${purchase.productID}');

    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –Ω–∞ backend –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º callback
    onPurchaseSuccess?.call(purchase.productID);
  }

  /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ (–¥–ª—è non-consumable)
  Future<void> restorePurchases() async {
    try {
      await _iap.restorePurchases();
      print('‚úÖ Purchases restored');
    } catch (e) {
      print('‚ùå Error restoring purchases: $e');
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _subscription?.cancel();
  }
}