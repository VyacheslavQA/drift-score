import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:isar_community/isar.dart';
import '../../data/models/local/team_local.dart';
import '../../data/models/local/competition_local.dart';
import '../../data/services/sync_service.dart';
import 'competition_provider.dart';

final teamProvider = StateNotifierProvider.family<TeamNotifier, AsyncValue<List<TeamLocal>>, int>(
      (ref, competitionId) {
    final isar = ref.watch(isarProvider);
    final syncService = ref.watch(syncServiceProvider);
    return TeamNotifier(isar, syncService, competitionId);
  },
);

class TeamNotifier extends StateNotifier<AsyncValue<List<TeamLocal>>> {
  final Isar isar;
  final SyncService syncService;
  final int competitionId;

  TeamNotifier(this.isar, this.syncService, this.competitionId) : super(const AsyncValue.loading()) {
    loadTeams();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å serverId —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
  Future<String?> _getCompetitionServerId() async {
    final competition = await isar.competitionLocals.get(competitionId);
    return competition?.serverId;
  }

  Future<void> loadTeams() async {
    print('üîµ loadTeams() called for competition: $competitionId');
    state = const AsyncValue.loading();

    try {
      final teams = await isar.teamLocals
          .filter()
          .competitionLocalIdEqualTo(competitionId)
          .sortByCreatedAt()
          .findAll();

      print('‚úÖ Teams loaded: ${teams.length} teams');
      for (var team in teams) {
        print('   - ${team.name} (Synced: ${team.isSynced})');
      }
      state = AsyncValue.data(teams);
    } catch (e, stack) {
      print('‚ùå Error loading teams: $e');
      state = AsyncValue.error(e, stack);
    }
  }

  /// ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ Firebase
  Future<void> syncTeamsFromFirebase() async {
    print('üîµ syncTeamsFromFirebase() called');
    try {
      final competitionServerId = await _getCompetitionServerId();
      if (competitionServerId == null || competitionServerId.isEmpty) {
        print('‚ö†Ô∏è Competition not synced to Firebase yet');
        return;
      }

      await syncService.syncTeamsFromFirebase(competitionServerId);
      print('‚úÖ Teams synced from Firebase');
      await loadTeams();
    } catch (e, stack) {
      print('‚ùå Error syncing teams from Firebase: $e');
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> createTeam({
    required String name,
    required String city,
    String? club,
    required List<TeamMember> members,
  }) async {
    print('üîµ createTeam() called: $name');

    try {
      final team = TeamLocal()
        ..competitionLocalId = competitionId
        ..name = name
        ..city = city
        ..club = club
        ..members = members
        ..isSynced = false
        ..createdAt = DateTime.now()
        ..updatedAt = DateTime.now();

      await isar.writeTxn(() async {
        await isar.teamLocals.put(team);
      });

      print('‚úÖ Team created locally: ${team.name}, ID: ${team.id}');

      // ‚úÖ –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Firebase
      final competitionServerId = await _getCompetitionServerId();
      if (competitionServerId != null && competitionServerId.isNotEmpty) {
        print('üîÑ Syncing team to Firebase...');
        try {
          await syncService.syncTeamToFirebase(team, competitionServerId);
          print('‚úÖ Team synced to Firebase successfully');
        } catch (e) {
          print('‚ö†Ô∏è Error syncing team to Firebase (will retry later): $e');
        }
      } else {
        print('‚ö†Ô∏è Competition not synced to Firebase yet - team will sync later');
      }

      await loadTeams();
    } catch (e, stack) {
      print('‚ùå Error creating team: $e');
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> updateTeam({
    required int teamId,
    required String name,
    required String city,
    String? club,
    required List<TeamMember> members,
  }) async {
    print('üîµ updateTeam() called: ID $teamId');

    try {
      final team = await isar.teamLocals.get(teamId);

      if (team == null) {
        print('‚ùå Team not found: $teamId');
        return;
      }

      team
        ..name = name
        ..city = city
        ..club = club
        ..members = members
        ..isSynced = false
        ..updatedAt = DateTime.now();

      await isar.writeTxn(() async {
        await isar.teamLocals.put(team);
      });

      print('‚úÖ Team updated locally: ${team.name}');

      // ‚úÖ –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Firebase
      final competitionServerId = await _getCompetitionServerId();
      if (competitionServerId != null && competitionServerId.isNotEmpty) {
        print('üîÑ Syncing updated team to Firebase...');
        try {
          await syncService.syncTeamToFirebase(team, competitionServerId);
          print('‚úÖ Team synced to Firebase successfully');
        } catch (e) {
          print('‚ö†Ô∏è Error syncing team to Firebase (will retry later): $e');
        }
      }

      await loadTeams();
    } catch (e, stack) {
      print('‚ùå Error updating team: $e');
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> deleteTeam(int teamId) async {
    print('üîµ deleteTeam() called: ID $teamId');

    try {
      // –ü–æ–ª—É—á–∞–µ–º serverId –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      final team = await isar.teamLocals.get(teamId);
      final teamServerId = team?.serverId;
      final competitionServerId = await _getCompetitionServerId();

      await isar.writeTxn(() async {
        final success = await isar.teamLocals.delete(teamId);
        print('‚úÖ Team deleted locally: $success');
      });

      // ‚úÖ –ù–û–í–û–ï: –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Firebase
      if (teamServerId != null &&
          teamServerId.isNotEmpty &&
          competitionServerId != null &&
          competitionServerId.isNotEmpty) {
        print('üîÑ Deleting team from Firebase...');
        try {
          await syncService.deleteTeamFromFirebase(competitionServerId, teamServerId);
          print('‚úÖ Team deleted from Firebase successfully');
        } catch (e) {
          print('‚ö†Ô∏è Error deleting team from Firebase: $e');
        }
      } else {
        print('‚ö†Ô∏è Team was not synced to Firebase');
      }

      await loadTeams();
    } catch (e, stack) {
      print('‚ùå Error deleting team: $e');
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> assignSector(int teamId, int sector) async {
    print('üîµ assignSector() called: Team $teamId ‚Üí Sector $sector');

    try {
      final team = await isar.teamLocals.get(teamId);

      if (team == null) {
        print('‚ùå Team not found: $teamId');
        return;
      }

      team
        ..sector = sector
        ..isSynced = false
        ..updatedAt = DateTime.now();

      await isar.writeTxn(() async {
        await isar.teamLocals.put(team);
      });

      print('‚úÖ Sector assigned locally');

      // ‚úÖ –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Firebase
      final competitionServerId = await _getCompetitionServerId();
      if (competitionServerId != null && competitionServerId.isNotEmpty) {
        print('üîÑ Syncing sector assignment to Firebase...');
        try {
          await syncService.syncTeamToFirebase(team, competitionServerId);
          print('‚úÖ Sector synced to Firebase successfully');
        } catch (e) {
          print('‚ö†Ô∏è Error syncing sector to Firebase (will retry later): $e');
        }
      }

      await loadTeams();
    } catch (e, stack) {
      print('‚ùå Error assigning sector: $e');
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> addPenalty(int teamId, String description, String judgeId) async {
    print('üîµ addPenalty() called: Team $teamId');

    try {
      final team = await isar.teamLocals.get(teamId);

      if (team == null) {
        print('‚ùå Team not found: $teamId');
        return;
      }

      final penalty = Penalty()
        ..id = DateTime.now().millisecondsSinceEpoch.toString()
        ..description = description
        ..createdAt = DateTime.now()
        ..addedByJudgeId = judgeId;

      team.penalties.add(penalty);
      team.isSynced = false;
      team.updatedAt = DateTime.now();

      await isar.writeTxn(() async {
        await isar.teamLocals.put(team);
      });

      print('‚úÖ Penalty added locally');

      // ‚úÖ –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Firebase
      final competitionServerId = await _getCompetitionServerId();
      if (competitionServerId != null && competitionServerId.isNotEmpty) {
        print('üîÑ Syncing penalty to Firebase...');
        try {
          await syncService.syncTeamToFirebase(team, competitionServerId);
          print('‚úÖ Penalty synced to Firebase successfully');
        } catch (e) {
          print('‚ö†Ô∏è Error syncing penalty to Firebase (will retry later): $e');
        }
      }

      await loadTeams();
    } catch (e, stack) {
      print('‚ùå Error adding penalty: $e');
      state = AsyncValue.error(e, stack);
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∂–µ—Ä–µ–±—å—ë–≤–∫–∏ (–æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å + —Å–µ–∫—Ç–æ—Ä)
  Future<void> saveDrawResults(Map<int, DrawData> drawResults) async {
    print('üîµ saveDrawResults() called for ${drawResults.length} teams');

    try {
      final updatedTeams = <TeamLocal>[];

      await isar.writeTxn(() async {
        for (var entry in drawResults.entries) {
          final teamId = entry.key;
          final drawData = entry.value;

          final team = await isar.teamLocals.get(teamId);
          if (team != null) {
            team.drawOrder = drawData.drawOrder;
            team.sector = drawData.sector;
            team.isSynced = false;
            team.updatedAt = DateTime.now();
            await isar.teamLocals.put(team);
            print('  ‚úÖ Team ${team.name}: order=${drawData.drawOrder}, sector=${drawData.sector}');
            updatedTeams.add(team);
          }
        }
      });

      print('‚úÖ Draw results saved locally');

      // ‚úÖ –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å Firebase
      final competitionServerId = await _getCompetitionServerId();
      if (competitionServerId != null && competitionServerId.isNotEmpty) {
        print('üîÑ Syncing draw results to Firebase...');
        for (var team in updatedTeams) {
          try {
            await syncService.syncTeamToFirebase(team, competitionServerId);
            print('  ‚úÖ Team ${team.name} synced');
          } catch (e) {
            print('  ‚ö†Ô∏è Error syncing team ${team.name}: $e');
          }
        }
        print('‚úÖ All draw results synced to Firebase');
      }

      await loadTeams();
    } catch (e, stack) {
      print('‚ùå Error saving draw results: $e');
      state = AsyncValue.error(e, stack);
    }
  }
}

/// –î–∞–Ω–Ω—ã–µ –∂–µ—Ä–µ–±—å—ë–≤–∫–∏ –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
class DrawData {
  final int? drawOrder;
  final int? sector;

  DrawData({this.drawOrder, this.sector});
}