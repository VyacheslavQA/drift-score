import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:math';
import '../../core/theme/app_colors.dart';
import '../../core/theme/app_text_styles.dart';
import '../../core/theme/app_dimensions.dart';

class AdminPanelScreen extends ConsumerStatefulWidget {
  const AdminPanelScreen({super.key});

  @override
  ConsumerState<AdminPanelScreen> createState() => _AdminPanelScreenState();
}

class _AdminPanelScreenState extends ConsumerState<AdminPanelScreen> {
  final _formKey = GlobalKey<FormState>();

  // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞
  String _selectedFishingType = 'carp';
  final _customLabelController = TextEditingController();
  String _codeType = 'single_use';
  final _noteController = TextEditingController();

  // –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤
  List<Map<String, dynamic>> _codes = [];
  bool _isLoadingCodes = true;

  @override
  void initState() {
    super.initState();
    _loadCodes();
  }

  @override
  void dispose() {
    _customLabelController.dispose();
    _noteController.dispose();
    super.dispose();
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
  Future<void> _loadCodes() async {
    setState(() => _isLoadingCodes = true);

    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('access_codes')
          .orderBy('createdAt', descending: true)  // ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£
          .limit(50)
          .get();

      setState(() {
        _codes = snapshot.docs.map((doc) {
          return {
            'id': doc.id,
            ...doc.data(),
          };
        }).toList();
        _isLoadingCodes = false;
      });

      print('‚úÖ Loaded ${_codes.length} codes');
    } catch (e) {
      print('‚ùå Error loading codes: $e');
      setState(() => _isLoadingCodes = false);
    }
  }

  /// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
  Future<String> _generateUniqueCode(String fishingType, String? customLabel) async {
    int attempts = 0;
    const maxAttempts = 10;

    while (attempts < maxAttempts) {
      final code = _buildCode(fishingType, customLabel);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ Firestore
      final snapshot = await FirebaseFirestore.instance
          .collection('access_codes')
          .where('code', isEqualTo: code)
          .get();

      if (snapshot.docs.isEmpty) {
        print('‚úÖ Generated unique code: $code');
        return code;
      }

      print('‚ö†Ô∏è Code $code already exists, retrying...');
      attempts++;
    }

    throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å–ª–µ $maxAttempts –ø–æ–ø—ã—Ç–æ–∫');
  }

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–¥
  String _buildCode(String fishingType, String? customLabel) {
    // –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Ä—ã–±–∞–ª–∫–∏
    final Map<String, String> prefixes = {
      'float': 'FLOAT',
      'spinning': 'SPIN',
      'carp': 'CARP',
      'feeder': 'FEED',
      'ice_jig': 'ICEJ',
      'ice_spoon': 'ICES',
      'trout': 'TROUT',
      'fly': 'FLY',
      'casting': 'CAST',
    };

    final prefix = prefixes[fishingType] ?? 'COMP';
    final middle = (customLabel != null && customLabel.isNotEmpty)
        ? customLabel.toUpperCase()
        : _generateRandomString(4);
    final suffix = _generateRandomString(4);

    return '$prefix-$middle-$suffix';
  }

  /// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É (–±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã)
  String _generateRandomString(int length) {
    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789'; // –ë–µ–∑ 0, O, I, 1
    final random = Random.secure();
    return List.generate(length, (index) => chars[random.nextInt(chars.length)]).join();
  }

  /// –°–æ–∑–¥–∞—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞
  Future<void> _createAccessCode() async {
    if (!_formKey.currentState!.validate()) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => Center(
        child: Card(
          child: Padding(
            padding: EdgeInsets.all(AppDimensions.paddingLarge),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                CircularProgressIndicator(color: AppColors.primary),
                SizedBox(height: AppDimensions.paddingMedium),
                Text('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞...', style: AppTextStyles.body),
              ],
            ),
          ),
        ),
      ),
    );

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
      final customLabel = _customLabelController.text.trim();
      final code = await _generateUniqueCode(
        _selectedFishingType,
        customLabel.isEmpty ? null : customLabel,
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
      await FirebaseFirestore.instance.collection('access_codes').add({
        'code': code,
        'fishingType': _selectedFishingType,
        'customLabel': customLabel.isEmpty ? null : customLabel,
        'type': _codeType,
        'maxUses': _codeType == 'single_use' ? 1 : 999,
        'currentUses': 0,
        'isActive': true,
        'createdAt': FieldValue.serverTimestamp(),
        'createdBy': 'admin',
        'note': _noteController.text.trim(),
        'usedBy': [],
      });

      if (!mounted) return;
      Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö —Å –∫–æ–¥–æ–º
      _showSuccessDialog(code);

      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      _customLabelController.clear();
      _noteController.clear();
      setState(() {
        _selectedFishingType = 'carp';
        _codeType = 'single_use';
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      _loadCodes();
    } catch (e) {
      if (!mounted) return;
      Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
  void _showSuccessDialog(String code) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.check_circle, color: AppColors.success, size: 28),
            SizedBox(width: AppDimensions.paddingSmall),
            Text('–ö–æ–¥ —Å–æ–∑–¥–∞–Ω!'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              padding: EdgeInsets.all(AppDimensions.paddingMedium),
              decoration: BoxDecoration(
                color: AppColors.primary.withOpacity(0.1),
                borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
                border: Border.all(color: AppColors.primary, width: 2),
              ),
              child: SelectableText(
                code,
                style: AppTextStyles.h2.copyWith(
                  fontFamily: 'monospace',
                  color: AppColors.primary,
                ),
              ),
            ),
            SizedBox(height: AppDimensions.paddingMedium),
            ElevatedButton.icon(
              onPressed: () {
                Clipboard.setData(ClipboardData(text: code));
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω'),
                    backgroundColor: AppColors.success,
                  ),
                );
              },
              icon: Icon(Icons.copy),
              label: Text('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.primary,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('–ó–∞–∫—Ä—ã—Ç—å'),
          ),
        ],
      ),
    );
  }

  /// –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
  Future<void> _deactivateCode(String codeId, String code) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥?'),
        content: Text('–í—Å–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª—è—Ç—Å—è.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: Text('–û—Ç–º–µ–Ω–∞'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: Text('–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'),
          ),
        ],
      ),
    );

    if (confirmed != true) return;

    try {
      // 1. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–¥
      await FirebaseFirestore.instance
          .collection('access_codes')
          .doc(codeId)
          .update({
        'isActive': false,
        'deactivatedAt': FieldValue.serverTimestamp(),
        'deactivatedBy': 'admin',
      });

      // 2. –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è —Å —ç—Ç–∏–º –∫–æ–¥–æ–º
      final competitions = await FirebaseFirestore.instance
          .collection('competitions')
          .where('accessCode', isEqualTo: code)
          .where('status', whereIn: ['draft', 'active'])
          .get();

      print('üö´ Blocking ${competitions.docs.length} competitions with code: $code');

      for (var comp in competitions.docs) {
        await comp.reference.update({
          'status': 'blocked',
          'blockedReason': '–ö–æ–¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
          'blockedAt': FieldValue.serverTimestamp(),
        });
        print('   ‚úÖ Blocked competition: ${comp.id}');
      }

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–ö–æ–¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π: ${competitions.docs.length}'),
          backgroundColor: Colors.orange,
        ),
      );

      _loadCodes();
    } catch (e) {
      print('‚ùå Error deactivating code: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  /// –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
  Future<void> _reactivateCode(String codeId, String code) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥?'),
        content: Text('–í—Å–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: Text('–û—Ç–º–µ–Ω–∞'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            style: TextButton.styleFrom(foregroundColor: AppColors.success),
            child: Text('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'),
          ),
        ],
      ),
    );

    if (confirmed != true) return;

    try {
      // 1. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–¥
      await FirebaseFirestore.instance
          .collection('access_codes')
          .doc(codeId)
          .update({
        'isActive': true,
        'reactivatedAt': FieldValue.serverTimestamp(),
        'reactivatedBy': 'admin',
      });

      // 2. –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
      final competitions = await FirebaseFirestore.instance
          .collection('competitions')
          .where('accessCode', isEqualTo: code)
          .where('status', isEqualTo: 'blocked')
          .get();

      print('‚ôªÔ∏è Unblocking ${competitions.docs.length} competitions with code: $code');

      for (var comp in competitions.docs) {
        await comp.reference.update({
          'status': 'active',
          'blockedReason': null,
          'unblockedAt': FieldValue.serverTimestamp(),
        });
        print('   ‚úÖ Unblocked competition: ${comp.id}');
      }

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π: ${competitions.docs.length}'),
          backgroundColor: AppColors.success,
        ),
      );

      _loadCodes();
    } catch (e) {
      print('‚ùå Error reactivating code: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.background,
      appBar: AppBar(
        backgroundColor: AppColors.surface,
        title: Row(
          children: [
            Icon(Icons.shield, color: AppColors.primary),
            SizedBox(width: AppDimensions.paddingSmall),
            Text('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', style: AppTextStyles.h2),
          ],
        ),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(AppDimensions.paddingLarge),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞
            _buildCreateCodeForm(),

            SizedBox(height: AppDimensions.paddingXLarge),

            // –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤
            _buildCodesList(),
          ],
        ),
      ),
    );
  }

  // ============ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î ============
  Widget _buildCreateCodeForm() {
    return Card(
      color: AppColors.surfaceLight,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
      ),
      child: Padding(
        padding: EdgeInsets.all(AppDimensions.paddingLarge),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Text(
                '–°–æ–∑–¥–∞—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞',
                style: AppTextStyles.h2,
              ),
              SizedBox(height: AppDimensions.paddingLarge),

              // –¢–∏–ø —Ä—ã–±–∞–ª–∫–∏
              Text('–¢–∏–ø —Ä—ã–±–∞–ª–∫–∏:', style: AppTextStyles.bodyLarge),
              SizedBox(height: AppDimensions.paddingSmall),
              DropdownButtonFormField<String>(
                value: _selectedFishingType,
                decoration: InputDecoration(
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
                  ),
                  prefixIcon: Icon(Icons.phishing, color: AppColors.primary),
                ),
                items: [
                  DropdownMenuItem(value: 'float', child: Text('–ü–æ–ø–ª–∞–≤–æ–∫')),
                  DropdownMenuItem(value: 'spinning', child: Text('–°–ø–∏–Ω–Ω–∏–Ω–≥')),
                  DropdownMenuItem(value: 'carp', child: Text('–ö–∞—Ä–ø—Ñ–∏—à–∏–Ω–≥')),
                  DropdownMenuItem(value: 'feeder', child: Text('–§–∏–¥–µ—Ä')),
                  DropdownMenuItem(value: 'ice_jig', child: Text('–ó–∏–º–Ω—è—è –º–æ—Ä–º—ã—à–∫–∞')),
                  DropdownMenuItem(value: 'ice_spoon', child: Text('–ó–∏–º–Ω—è—è –±–ª–µ—Å–Ω–∞')),
                  DropdownMenuItem(value: 'trout', child: Text('–§–æ—Ä–µ–ª—å')),
                  DropdownMenuItem(value: 'fly', child: Text('–ù–∞—Ö–ª—ã—Å—Ç')),
                  DropdownMenuItem(value: 'casting', child: Text('–ö–∞—Å—Ç–∏–Ω–≥')),
                ],
                onChanged: (value) {
                  setState(() => _selectedFishingType = value!);
                },
              ),

              SizedBox(height: AppDimensions.paddingMedium),

              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–µ—Ç–∫–∞
              Text('–ú–µ—Ç–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', style: AppTextStyles.bodyLarge),
              SizedBox(height: AppDimensions.paddingSmall),
              TextFormField(
                controller: _customLabelController,
                decoration: InputDecoration(
                  hintText: 'WINTER, CUP2025...',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
                  ),
                  prefixIcon: Icon(Icons.label_outline, color: AppColors.primary),
                ),
                textCapitalization: TextCapitalization.characters,
                inputFormatters: [
                  FilteringTextInputFormatter.allow(RegExp(r'[A-Z0-9]')),
                  LengthLimitingTextInputFormatter(10),
                ],
              ),

              SizedBox(height: AppDimensions.paddingLarge),

              // ‚úÖ –ù–û–í–û–ï: –¢–∏–ø –∫–æ–¥–∞ - –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û
              Text('–¢–∏–ø –∫–æ–¥–∞:', style: AppTextStyles.bodyLarge),
              SizedBox(height: AppDimensions.paddingSmall),

// –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π
              GestureDetector(
                onTap: () => setState(() => _codeType = 'single_use'),
                child: Container(
                  padding: EdgeInsets.all(AppDimensions.paddingMedium),
                  decoration: BoxDecoration(
                    color: _codeType == 'single_use'
                        ? AppColors.success.withOpacity(0.2)
                        : AppColors.surfaceMedium,
                    border: Border.all(
                      color: _codeType == 'single_use'
                          ? AppColors.success
                          : AppColors.borderDark,
                      width: 2,
                    ),
                    borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
                  ),
                  child: Row(
                    children: [
                      Icon(
                        Icons.check_circle,
                        color: _codeType == 'single_use'
                            ? AppColors.success
                            : AppColors.textSecondary,
                        size: 28,
                      ),
                      SizedBox(width: AppDimensions.paddingMedium),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              '–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π',
                              style: AppTextStyles.bodyLarge.copyWith(
                                fontWeight: FontWeight.bold,
                                color: _codeType == 'single_use'
                                    ? AppColors.success
                                    : AppColors.textSecondary,
                              ),
                            ),
                            SizedBox(height: 2),
                            Text(
                              '1 —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ',
                              style: AppTextStyles.caption,
                            ),
                          ],
                        ),
                      ),
                      if (_codeType == 'single_use')
                        Icon(Icons.check, color: AppColors.success, size: 24),
                    ],
                  ),
                ),
              ),

              SizedBox(height: AppDimensions.paddingMedium),

// –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π
              GestureDetector(
                onTap: () => setState(() => _codeType = 'multi_use'),
                child: Container(
                  padding: EdgeInsets.all(AppDimensions.paddingMedium),
                  decoration: BoxDecoration(
                    color: _codeType == 'multi_use'
                        ? AppColors.primary.withOpacity(0.2)
                        : AppColors.surfaceMedium,
                    border: Border.all(
                      color: _codeType == 'multi_use'
                          ? AppColors.primary
                          : AppColors.borderDark,
                      width: 2,
                    ),
                    borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
                  ),
                  child: Row(
                    children: [
                      Icon(
                        Icons.repeat,
                        color: _codeType == 'multi_use'
                            ? AppColors.primary
                            : AppColors.textSecondary,
                        size: 28,
                      ),
                      SizedBox(width: AppDimensions.paddingMedium),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              '–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π',
                              style: AppTextStyles.bodyLarge.copyWith(
                                fontWeight: FontWeight.bold,
                                color: _codeType == 'multi_use'
                                    ? AppColors.primary
                                    : AppColors.textSecondary,
                              ),
                            ),
                            SizedBox(height: 2),
                            Text(
                              '‚àû —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π',
                              style: AppTextStyles.caption,
                            ),
                          ],
                        ),
                      ),
                      if (_codeType == 'multi_use')
                        Icon(Icons.check, color: AppColors.primary, size: 24),
                    ],
                  ),
                ),
              ),

              SizedBox(height: AppDimensions.paddingLarge),

              // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
              Text('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:', style: AppTextStyles.bodyLarge),
              SizedBox(height: AppDimensions.paddingSmall),
              TextFormField(
                controller: _noteController,
                decoration: InputDecoration(
                  hintText: '–ó–∏–º–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä –ü–∞–≤–ª–æ–¥–∞—Ä',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
                  ),
                  prefixIcon: Icon(Icons.notes, color: AppColors.primary),
                ),
                maxLines: 2,
              ),

              SizedBox(height: AppDimensions.paddingLarge),

              // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
              ElevatedButton.icon(
                onPressed: _createAccessCode,
                icon: Icon(Icons.add_circle_outline),
                label: Text('–°–æ–∑–¥–∞—Ç—å –∫–æ–¥'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppColors.primary,
                  padding: EdgeInsets.symmetric(vertical: AppDimensions.paddingMedium + 4),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildCodesList() {
    return Card(
      color: AppColors.surfaceLight,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
      ),
      child: Padding(
        padding: EdgeInsets.all(AppDimensions.paddingLarge),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text('–ö–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞', style: AppTextStyles.h2),
                TextButton.icon(
                  onPressed: _loadCodes,
                  icon: Icon(Icons.refresh, size: 20),
                  label: Text('–û–±–Ω–æ–≤–∏—Ç—å'),
                ),
              ],
            ),
            SizedBox(height: AppDimensions.paddingMedium),

            if (_isLoadingCodes)
              Center(
                child: Padding(
                  padding: EdgeInsets.all(AppDimensions.paddingXLarge),
                  child: CircularProgressIndicator(color: AppColors.primary),
                ),
              )
            else if (_codes.isEmpty)
              Center(
                child: Padding(
                  padding: EdgeInsets.all(AppDimensions.paddingXLarge),
                  child: Text(
                    '–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤',
                    style: AppTextStyles.body.copyWith(color: AppColors.textSecondary),
                  ),
                ),
              )
            else
              ListView.builder(
                shrinkWrap: true,
                physics: NeverScrollableScrollPhysics(),
                itemCount: _codes.length,
                itemBuilder: (context, index) {
                  final codeData = _codes[index];
                  return _buildCodeItem(codeData);
                },
              ),
          ],
        ),
      ),
    );
  }

  // ============ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î ============
  Widget _buildCodeItem(Map<String, dynamic> codeData) {
    final code = codeData['code'] as String;
    final isActive = codeData['isActive'] as bool? ?? true;
    final currentUses = codeData['currentUses'] as int? ?? 0;
    final maxUses = codeData['maxUses'] as int? ?? 1;
    final note = codeData['note'] as String?;
    final createdAt = codeData['createdAt'] as Timestamp?;
    final codeType = codeData['type'] as String?;
    final deactivatedBy = codeData['deactivatedBy'] as String?;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–¥–∞
    final bool isUsedUp = currentUses >= maxUses && maxUses > 0;
    final bool isManuallyDeactivated = !isActive && deactivatedBy == 'admin';

    // –¶–≤–µ—Ç –∏ –∏–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    Color statusColor;
    IconData statusIcon;
    String statusText;

    if (isActive) {
      statusColor = AppColors.success;
      statusIcon = Icons.check_circle;
      statusText = '–ê–∫—Ç–∏–≤–µ–Ω';
    } else if (isManuallyDeactivated) {
      statusColor = Colors.orange;
      statusIcon = Icons.block;
      statusText = '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω';
    } else {
      statusColor = Colors.grey;
      statusIcon = Icons.cancel;
      statusText = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω';
    }

    return Container(
      margin: EdgeInsets.only(bottom: AppDimensions.paddingMedium),
      padding: EdgeInsets.all(AppDimensions.paddingMedium),
      decoration: BoxDecoration(
        color: isActive
            ? AppColors.surfaceMedium
            : AppColors.surfaceMedium.withOpacity(0.5),
        borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
        border: Border.all(
          color: statusColor.withOpacity(0.3),
          width: 2,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // –°—Ç—Ä–æ–∫–∞: –°—Ç–∞—Ç—É—Å + –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
          Row(
            children: [
              // –°—Ç–∞—Ç—É—Å
              Container(
                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: statusColor.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(6),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(statusIcon, size: 14, color: statusColor),
                    SizedBox(width: 4),
                    Text(
                      statusText,
                      style: AppTextStyles.caption.copyWith(
                        color: statusColor,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
              Spacer(),
              // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
              IconButton(
                icon: Icon(Icons.copy, size: 20),
                tooltip: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
                color: AppColors.primary,
                onPressed: () {
                  Clipboard.setData(ClipboardData(text: code));
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω'),
                      backgroundColor: AppColors.success,
                    ),
                  );
                },
              ),
              if (isActive && !isUsedUp)
                IconButton(
                  icon: Icon(Icons.block, size: 20),
                  tooltip: '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
                  color: Colors.red,
                  onPressed: () => _deactivateCode(codeData['id'], code),
                ),
              if (isManuallyDeactivated)
                IconButton(
                  icon: Icon(Icons.refresh, size: 20),
                  tooltip: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
                  color: AppColors.success,
                  onPressed: () => _reactivateCode(codeData['id'], code),
                ),
            ],
          ),

          SizedBox(height: 8),

          // –ö–æ–¥ (–∫—Ä—É–ø–Ω—ã–π, –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π)
          SelectableText(
            code,
            style: AppTextStyles.h2.copyWith(
              fontFamily: 'monospace',
              color: isActive ? AppColors.primary : AppColors.textSecondary,
            ),
          ),

          // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
          if (note != null && note.isNotEmpty) ...[
            SizedBox(height: 4),
            Text(
              note,
              style: AppTextStyles.body.copyWith(color: AppColors.textSecondary),
            ),
          ],

          SizedBox(height: 8),

          // –ë–µ–π–¥–∂–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞, —Ç–∏–ø)
          Wrap(
            spacing: 8,
            runSpacing: 6,
            children: [
              // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
              _buildBadge(
                icon: Icons.bar_chart,
                text: '$currentUses/${maxUses == 999 ? "‚àû" : maxUses}',
              ),

              // –î–∞—Ç–∞ (–∫–æ—Ä–æ—Ç–∫–∞—è)
              if (createdAt != null)
                _buildBadge(
                  icon: Icons.calendar_today,
                  text: DateFormat('dd.MM.yy').format(createdAt.toDate()),
                ),

              // –¢–∏–ø
              if (codeType == 'multi_use')
                _buildBadge(
                  icon: Icons.repeat,
                  text: '–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π',
                  color: AppColors.primary.withOpacity(0.2),
                  textColor: AppColors.primary,
                ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildBadge({
    required IconData icon,
    required String text,
    Color? color,
    Color? textColor,
  }) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: color ?? AppColors.surfaceMedium.withOpacity(0.5),
        borderRadius: BorderRadius.circular(6),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 12, color: textColor ?? AppColors.textSecondary),
          SizedBox(width: 4),
          Text(
            text,
            style: AppTextStyles.caption.copyWith(
              fontSize: 11,
              color: textColor ?? AppColors.textSecondary,
            ),
          ),
        ],
      ),
    );
  }
}